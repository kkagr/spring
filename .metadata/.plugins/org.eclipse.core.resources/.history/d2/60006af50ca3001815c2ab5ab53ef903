package com.liu.spring.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.dom4j.DocumentException;
import org.dom4j.Element;

import com.liu.spring.annotation.LCHController;
import com.liu.spring.annotation.LCHService;
import com.liu.spring.common.ClassUtil;
import com.liu.spring.common.Handle;
import com.liu.spring.common.ReadXmlUtil;
import com.liu.spring.common.SystemParam;
import com.liu.spring.common.characterUtil;

public class LchDispatchServlet extends HttpServlet{
	public static ConcurrentHashMap<String, Object> ioc = new ConcurrentHashMap<>();
	public static List<Handle> handleMapping = new ArrayList<>();
	@Override
	public void init(ServletConfig config) throws ServletException {
		//1.加载配置文件
		String test = config.getInitParameter("contextConfigLocation");
		try {
			List<Element> springList = SystemParam.springElement;
			for(Element element:springList){
				if( element.attributeValue("base-package") != null);{
					String servicePackage = element.attributeValue("base-package");
					List<Class<?>> classes = ClassUtil.getClasses(servicePackage);
					//3.初始化所有相关类的实例，并且将其放入到ioc容器中，也就是map中
					doInstance(classes);
				}
			}
			List<Element> elementList = ReadXmlUtil.readerXml(test);
			for(Element element:elementList){
				
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(test);
	}
	
	private void doInstance(List<Class<?>> classes) throws Exception {
		for(Class<?> clazz:classes){
			if(clazz.isAnnotationPresent(LCHController.class)){
				String beanName = characterUtil.toLowerCaseFirstOne(clazz.getSimpleName());
				ioc.put(beanName, ClassUtil.newInstance(clazz));
			}else if(clazz.isAnnotationPresent(LCHService.class)){
				LCHService service = clazz.getAnnotation(LCHService.class);
				String beanName = service.value();
				if(StringUtils.isBlank(beanName)){
					beanName = characterUtil.toLowerCaseFirstOne(clazz.getSimpleName());
				}
				ioc.put(beanName, clazz.newInstance());
				//3.如果是接口，使用接口类型作为key
				Class<?>[] interfaces = clazz.getInterfaces();
				for(Class<?> i:interfaces){
					ioc.put(i.getName(), clazz.newInstance());
				}
			}else{
				continue;
			}
		}
		
	}

	private void doInstance() {
		
		
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		super.doPost(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		super.doPost(req, resp);
	}
}
