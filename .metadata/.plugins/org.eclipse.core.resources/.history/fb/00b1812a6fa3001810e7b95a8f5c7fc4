package com.liu.spring.servlet;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.dom4j.Element;
import org.dom4j.XPath;

import com.liu.spring.annotation.LCHAutorited;
import com.liu.spring.annotation.LCHController;
import com.liu.spring.annotation.LCHRequestMapping;
import com.liu.spring.annotation.LCHService;
import com.liu.spring.common.ClassUtil;
import com.liu.spring.common.Handle;
import com.liu.spring.common.ReadXmlUtil;
import com.liu.spring.common.SystemParam;
import com.liu.spring.common.characterUtil;

public class LchDispatchServlet extends HttpServlet{
	public static ConcurrentHashMap<String, Object> ioc = new ConcurrentHashMap<>();
	public static List<Handle> hadleMapping = new ArrayList<>();
	String  prefix = "/";
	String suffix = ".jsp";
	@Override
	public void init(ServletConfig config) throws ServletException {
		//1.加载配置文件
		String test = config.getInitParameter("contextConfigLocation");
		try {
			List<Element> springList = SystemParam.springElement;
			for(Element element:springList){
				if( element.attributeValue("base-package") != null);{
					String servicePackage = element.attributeValue("base-package");
					List<Class<?>> classes = ClassUtil.getClasses(servicePackage);
					//3.初始化所有相关类的实例，并且将其放入到ioc容器中，也就是map中
					doInstance(classes);
				}
			}
			//4.自动实现依赖注入
			doAutiWrited();
			//5.初始化HandleMapping
			doInitHandlerMapping();
			List<Element> elementList = ReadXmlUtil.readerXml(test);
			Map<String,String> nsMap = new HashMap<String,String>();
			 nsMap.put("ns","http://www.springframework.org/schema/beans");
	         
			for(Element element:elementList){
                XPath propertyxsub = element.createXPath("ns:property");
                propertyxsub.setNamespaceURIs(nsMap);
                List<Element> propertys = propertyxsub.selectNodes(element);
                for(Element property: propertys){
                	if("prefix".equals( property.attributeValue("name"))){
                		prefix = property.attributeValue("value");
                	}
                	if("suffix".equals( property.attributeValue("name"))){
                		suffix = property.attributeValue("value");
                	}
                }
            }
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(test);
	}
	
	private void doInitHandlerMapping() {
		if(ioc.isEmpty()){return;}
		for(Map.Entry<String, Object> entry:ioc.entrySet()){
			Class<?> clazz = entry.getValue().getClass();
			if(!clazz.isAnnotationPresent(LCHController.class)){continue;}
			
			String baseUrl = "";
			if(clazz.isAnnotationPresent(LCHRequestMapping.class)){
				LCHRequestMapping requestMapping = clazz.getAnnotation(LCHRequestMapping.class);
				baseUrl = requestMapping.value().trim();
			}
			Method[] methods = clazz.getMethods();
			for(Method method:methods){
				if(!method.isAnnotationPresent(LCHRequestMapping.class)){continue;}
				 LCHRequestMapping requestMapping = method.getAnnotation(LCHRequestMapping.class);
				 String url = (baseUrl+requestMapping.value()).replaceAll("/+", "/");
				 Pattern pattern = Pattern.compile(url);
				 hadleMapping.add(new Handle(entry.getValue(), method, pattern));
				 System.out.println("Mapping"+url+"method"+method);
				
			}
		}
		
	}

	private void doAutiWrited() {
		if(ioc.isEmpty()){
			return;
		}else{
			for(Map.Entry<String,Object> entry:ioc.entrySet()){
				Field[] fields = entry.getValue().getClass().getDeclaredFields();
				for(Field field:fields){
					if(field.isAnnotationPresent(LCHAutorited.class)){
						LCHAutorited autorited = field.getAnnotation(LCHAutorited.class);
						String beanName = autorited.value().trim();
						if(StringUtils.isBlank(beanName)){
							beanName = field.getType().getName();
						}
						//不管public还是private都要强制注入
						field.setAccessible(true);
						try {
							field.set(entry.getValue(), ioc.get(beanName));
						} catch (IllegalArgumentException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
			
			}
		}
		
	}

	private void doInstance(List<Class<?>> classes) throws Exception {
		for(Class<?> clazz:classes){
			if(clazz.isAnnotationPresent(LCHController.class)){
				String beanName = characterUtil.toLowerCaseFirstOne(clazz.getSimpleName());
				ioc.put(beanName, ClassUtil.newInstance(clazz));
			}else if(clazz.isAnnotationPresent(LCHService.class)){
				LCHService service = clazz.getAnnotation(LCHService.class);
				String beanName = service.value();
				if(StringUtils.isBlank(beanName)){
					beanName = characterUtil.toLowerCaseFirstOne(clazz.getSimpleName());
				}
				ioc.put(beanName, clazz.newInstance());
				//3.如果是接口，使用接口类型作为key
				Class<?>[] interfaces = clazz.getInterfaces();
				for(Class<?> i:interfaces){
					ioc.put(i.getName(), clazz.newInstance());
				}
			}else{
				continue;
			}
		}
		
	}


	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		this.doPost(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			doDispatch(req, resp);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			resp.getWriter().write("500 Exception");
		}
	}
	private void doDispatch(HttpServletRequest req, HttpServletResponse resp) throws IOException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, ServletException {
		Handle handle = getHandler(req);
		if(handle == null){
			resp.getWriter().write("404 NOT Found");
			return;
		}
		Class<?>[] parameterTypes = handle.method.getParameterTypes();
		Object[] paramValues = new Object[parameterTypes.length];
		Map<String,String[]> params = req.getParameterMap();
		for(Map.Entry<String, String[]> param:params.entrySet()){
			String value = Arrays.toString(param.getValue()).replaceAll("\\[|\\]", "\\");
			if(!handle.paramIndexMapping.containsKey(param.getKey())){continue;}
			int index = handle.paramIndexMapping.get(param.getKey());
			paramValues[index] = handle.convert(parameterTypes[index],value);
		}
		int reqIndex = handle.paramIndexMapping.get(HttpServletRequest.class.getName());
		paramValues[reqIndex] = req;
		int respIndex = handle.paramIndexMapping.get(HttpServletResponse.class.getName());
		paramValues[respIndex] = resp;
		String resultPage =(String) handle.method.invoke(handle.controller, paramValues);
				//调用视图转换器渲染页面展示
				extResourceViewResolver(resultPage, req, resp);
	}
	private void extResourceViewResolver(String resultPage,HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
		String  prefix = "/";
		String suffix = ".jsp";
		req.getRequestDispatcher(prefix+resultPage+suffix).forward(req, resp);
	}
	
	private Handle getHandler(HttpServletRequest req) {
		String url = req.getRequestURI();
		String contextPath = req.getContextPath();
		url = url.replace(contextPath, "").replace("/+", "/");

		for(Handle handle:hadleMapping){
			Matcher matcher = handle.pattern.matcher(url);
			if(!matcher.matches()){continue;}
			return handle;
		}
		return null;
	}
}
